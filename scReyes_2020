#220713 pbmc from reyes et al, 2020,
#since reyes is wrote via python, i found another author with r code
#https://github.com/keita-iida/ASURATBI/blob/f223d9a0ba901a7ca15769e7647738c285780864/vignettes/04-pbmc130k.Rmd
#analyze the pbmc data
#https://keita-iida.github.io/ASURATBI/04-pbmc130k.html
library(ASURAT)
library(SingleCellExperiment)
library(SummarizedExperiment)

setwd("B:/ORG/Forschung/AN3/Liu_Na_LN/220708scRNA_sepsis/SCP548")

{
fn <- "expression/scp_gex_matrix.csv"
pbmc <- read.csv(fn, check.names = FALSE)

genes <- pbmc[-1, 2]
cells <- colnames(pbmc)[-seq_len(2)]
pbmc <- pbmc[-1, -seq_len(2)]
rownames(pbmc) <- make.unique(genes)
colnames(pbmc) <- make.unique(cells)
# Load sample information
info <- read.delim("metadata/scp_meta.txt")
info <- info[-1, ]
rownames(info) <- info$NAME
info <- info[, -1]
info <- info[cells, ]

# Create a SingleCellExperiment object.
pbmc <- SingleCellExperiment(assays = list(counts = as.matrix(pbmc)),
                             rowData = data.frame(gene = rownames(pbmc)),
                             colData = as.data.frame(info))

dim(pbmc)
saveRDS(pbmc, file = "backup/06_001_pbmc130k_data.rds")
}

pbmc <- readRDS("B:/ORG/Forschung/AN3/Liu_Na_LN/220708scRNA_sepsis/SCP548/20220219_pbmc130k_Reyes2020.rds")
# Preprocessing
## !!!Control data quality
#Remove variables (genes) and samples (cells) with low quality,
#by processing the following three steps:
  
#1. remove variables based on expression profiles across samples,
#2. remove samples based on the numbers of reads and nonzero expressed variables,
#3. remove variables based on the mean read counts across samples.

#First of all, add metadata for both variables and samples using ASURAT function
#`add_metadata()`.

pbmc <- add_metadata(sce = pbmc, 
                     mitochondria_symbol = "^MT-")

### Remove variables based on expression profiles
pbmc <- remove_variables(sce = pbmc, 
                         min_nsamples = 100)

### Remove samples based on expression profiles
title <- "PBMC (Reyes et al., 2020)"
df <- data.frame(x = colData(pbmc)$nReads, 
                 y = colData(pbmc)$nGenes)
p <- ggplot2::ggplot() +
  ggplot2::geom_point(ggplot2::aes(x = df$x, 
                                   y = df$y), 
                      size = 1, alpha = 1) +
  ggplot2::labs(title = title, 
                x = "Number of reads", 
                y = "Number of genes") +
  ggplot2::theme_classic(base_size = 20) +
  ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, 
                                                    size = 20))
filename <- "figures/figure_06_0010.png"
ggplot2::ggsave(file = filename, 
                plot = p, 
                dpi = 50, 
                width = 5, 
                height = 5)

pbmc <- remove_samples(sce = pbmc, 
                       min_nReads = 1500, max_nReads = 30000,
                       min_nGenes = 100, max_nGenes = 1e+10,
                       min_percMT = 0, max_percMT = 10)
#could not figure out the reason for this setting
#!!!

pbmc <- remove_variables_second(sce = pbmc, 
                                min_meannReads = 0.05)
#ASURAT function remove_variables_second() removes variable (gene) data such that 
#the mean read counts across samples are less than min_meannReads.

dim(pbmc)
#5723 59935
# Save data.
saveRDS(pbmc, file = "06_002_pbmc130k_dataqc.rds")

# Load data.
pbmc <- readRDS("06_002_pbmc130k_dataqc.rds")

#!!!normalization data
#Perform bayNorm() (Tang et al., Bioinformatics, 2020) 
#for attenuating technical biases with respect to zero 
#inflation and variation of capture efficiencies between 
#samples (cells).
library(bayNorm)
BETA <- bayNorm::BetaFun(Data = assay(pbmc, "counts"), 
                         MeanBETA = 0.06)
bay_out <- bayNorm::bayNorm(assay(pbmc, "counts"),
                            Conditions = colData(pbmc)$Patient,
                            BETA_vec = BETA[["BETA"]], 
                            Prior_type = "GG",
                            mode_version = TRUE)
#really hard to run o my computer!!! a big challenge
save(bay_out,file = 'bay_out.rda')
mat_list <- bay_out[["Bay_out_list"]]
#error! error! error!
#https://github.com/WT215/bayNorm
mat_list <- bay_out$Bay_out
mat <- do.call("cbind", mat_list)
#https://github.com/WT215/bayNorm/issues/1
#let us try the next code 
mat <- cbind(bay_out$Bay_out)
pbmc <- pbmc[, colnames(mat)]
assay(pbmc, "normalized") <- mat

#Perform log-normalization with a pseudo count.
assay(pbmc, "logcounts") <- log(assay(pbmc, "normalized") + 1)
#Center row data.
mat <- assay(pbmc, "logcounts")
assay(pbmc, "centered") <- sweep(mat, 1, 
                                 apply(mat, 1, mean), 
                                 FUN = "-")

#Set gene expression data into altExp(sce).
sname <- "logcounts"
altExp(pbmc, sname) <- SummarizedExperiment(list(counts = assay(pbmc, sname)))

#Add ENTREZ Gene IDs to rowData(sce).
library(AnnotationDbi)
dictionary <- AnnotationDbi::select(org.Hs.eg.db::org.Hs.eg.db,
                                    key = rownames(pbmc),
                                    columns = "ENTREZID", 
                                    keytype = "SYMBOL")
dictionary <- dictionary[!duplicated(dictionary$SYMBOL), ]
rowData(pbmc)$geneID <- dictionary$ENTREZID

# Save data.
saveRDS(pbmc, file = "06_003_pbmc130k_normalized.rds")
#!!!the whole process for normalization is time consuming and 
#could not handle in my computer with small ram

# Load data.
pbmc <- readRDS("06_003_pbmc130k_normalized.rds")
#6.14 https://keita-iida.github.io/ASURATBI/04-pbmc130k.html#reduce-dimensions-of-sign-by-sample-matrices
info <- as.data.frame(colData(pbmc))
library(Seurat)
##mat <- as.matrix(assay(pbmc, "counts")) #optimal
pbmc <- Seurat::CreateSeuratObject(counts = as.matrix(assay(pbmc, "counts")),
                                   project = "PBMC", 
                                   meta.data = info[,seq_len(4)])
#seq_len(5) changed 4, 
#Error: vector memory exhausted (limit reached?)
#multifaceted sign analysis
#Infer cell or disease types, biological functions, and signaling pathway 
#activity at the single-cell level by inputting related databases.

#ASURAT transforms centered read count tables to functional feature matrices, 
#termed sign-by-sample matrices (SSMs). Using SSMs, perform unsupervised clustering of samples (cells).

#https://satijalab.org/seurat/articles/sctransform_vignette.html
# store mitochondrial percentage in object meta data
pbmc <- PercentageFeatureSet(pbmc,
                             pattern = "^MT-", 
                             col.name = "percent.mt")
# run sctransform
library(Seurat)
library(ggplot2)
library(sctransform)
library(glmGamPoi)
# run sctransform
pbmc <- SCTransform(pbmc, method = "glmGamPoi",
                    vars.to.regress = "percent.mt", 
                    verbose = FALSE)

# These are now standard steps in the Seurat workflow for visualization and clustering
pbmc <- RunPCA(pbmc, verbose = FALSE)
#Compute the cumulative sum of variances, which is used for determining the number of the principal components (PCs).
pc <- which(cumsum(pbmc@reductions[["pca"]]@stdev) /
              sum(pbmc@reductions[["pca"]]@stdev) > 0.3)[1]
# Run t-SNE.
pbmc <- RunUMAP(pbmc, dims = seq_len(pc), verbose = FALSE)
# Create k-nearest neighbor graph.
pbmc <- FindNeighbors(pbmc, dims = seq_len(pc), verbose = FALSE)
# Cluster cells.
pbmc <- FindClusters(pbmc, resolution = 0.1,
                     verbose = FALSE)
DimPlot(pbmc, label = TRUE) + NoLegend()

head(pbmc@meta.data)
#Save data.
saveRDS(pbmc, file = "06_004_pbmc.rds")
setwd("~/Desktop")
pbmc <- readRDS("06_004_pbmc.rds")

table(pbmc[[]]$seurat_clusters)
#https://cloud.tencent.com/developer/article/1606504
#Seurat新版教程:Guided Clustering Tutorial-（下
print(pbmc[['pca']],dims=1:9,nfeatures = 9)
DimPlot(pbmc,reduction = 'pca')

cxcr2_expression = GetAssayData(object = pbmc, 
                               assay = "RNA", slot = "data")["CCL5",]
subcluster_markers = list(c1=c('NKG7','CCL5','GZMA','IL32','LTB',
                               'IL7R','MKI67','KIAA0101','HMGB2'), #T cells
                      c2=c('TCL1A','IGHD','CXCR4','IGHG1','IGHA1',
                           'CLECL1','MZB1','XBP1','JCHAIN'), #B cells
                      c3=c('FGFBP2','CCL4','FCGR3A','SELL','GZMK','XCL1'), #NK cells
                      c4=c('RETN','ALOX5AP','IL1R2','MS4A6A',
                           'HLA-DRA','HLA-DRB1','FCGR3A','MS4A7','FTH1',
                       'C1orf56','CTNNB1','CD14'), #Monocytes
                      c5=c('HLA-DRB1','CLEC10A','CD1C','GZMB',
                           'JCHAIN','IRF8','AXL','PPP1R14A','PLAC8') #Dendritic cells
)
pbmc_markers <- FindAllMarkers(pbmc,only.pos = T,
                               min.pct = .25,
                               thresh.use=.25)
library(tidyverse)
pbmc_markers_top5 <- pbmc_markers %>% 
  group_by(cluster) %>%
  top_n(5, avg_log2FC)
#https://learn.gencore.bio.nyu.edu/single-cell-rnaseq/seurat-part-4-cell-clustering/
#https://satijalab.org/seurat/articles/pbmc3k_tutorial.html

DoHeatmap(object = pbmc, 
          genes.use = top10$gene, 
          slim.col.label = TRUE, 
          remove.key = TRUE)
FeaturePlot(pbmc, features = subcluster_markers$c1,label = T)
#c1 for t cells 
FeaturePlot(object = pbmc, 
            features.plot =subcluster_markers$c1,
            reduction.use = "umap")
FeaturePlot(pbmc, features = subcluster_markers$c2,label = T)
#c2 for b cells
FeaturePlot(pbmc, features = subcluster_markers$c3,label = T)
#c3 for nk cells
FeaturePlot(pbmc, features = subcluster_markers$c4,label = T)
#c4 for monocyte cells
FeaturePlot(pbmc, features = subcluster_markers$c5,label = T)
#c5 for dc cells
DimPlot(pbmc, 
        reduction = 'umap', 
        group.by = subcluster_markers$c1, 
        label = TRUE)
dotplot(pbmc,
        features=subcluster_markers$c1,
        assay='RNA',
        group.by='umap')



# TabulaMurisData to annotate cell type via singleR
#https://github.com/mousepixels/sanbomics/blob/main/single_r.Rmd
library(celldex)
#https://bioconductor.org/packages/release/data/experiment/vignettes/celldex/inst/doc/userguide.html
ref_hpbmc <- HumanPrimaryCellAtlasData()
save(ref_hpbmc,file = 'HumanPrimaryCellAtlas.rda')
ref_himmune <- celldex::DatabaseImmuneCellExpressionData()
save(ref_himmune,file = 'DatabaseImmuneCellExpression.rda')
library(SingleR)
cluster_hpbmc <- SingleR(test = as.SingleCellExperiment(pbmc), 
        ref = ref_hpbmc, 
        labels = ref_hpbmc$label.main)

pbmc$SingleR_labels <- cluster_hpbmc$labels
head(pbmc$SingleR_labels)
table(pbmc$SingleR_labels)

DimPlot(pbmc, 
        reduction = 'umap', 
        group.by = 'SingleR_labels', 
        label = TRUE)

FeaturePlot(pbmc, features = c("CXCR2", "CXCL8"))

#for human immune cluster from singleR
cluster_himmune <- SingleR(test = as.SingleCellExperiment(pbmc), 
                         ref = ref_himmune, 
                         labels = ref_himmune$label.main)

pbmc$SingleR_immune <- cluster_himmune$labels
head(pbmc$SingleR_immune)
table(pbmc$SingleR_immune)

DimPlot(pbmc, 
        reduction = 'umap', 
        group.by = 'SingleR_immune', 
        label = TRUE)
DimPlot(pbmc, 
        reduction = 'umap', 
        group.by = 'SingleR_immune', 
        label = F)

FeaturePlot(pbmc, features = c("CXCR2"))
table(pbmc@meta.data$orig.ident)
table(pbmc@meta.data$seurat_clusters)
#8 cluster 
Idents(pbmc)
GetAssayData(pbmc,slot = 'counts')
allgenes <- row.names(GetAssayData(pbmc,slot = 'counts'))
allgenes[grep('CXC',allgenes)]
#no features for cxcl8 & cxcr2
allgenes[grep('IL',allgenes)]

#could also combine more than one dataset
cluster_pbmcimmune <- SingleR(test = as.SingleCellExperiment(pbmc), 
                           ref = list(pbmc=ref_hpbmc,immune=ref_himmune), 
                           labels = list(ref_hpbmc$label.main,
                                         ref_himmune$label.main))

pbmc$SingleR_pbmcimmune <- cluster_pbmcimmune$labels
head(pbmc$SingleR_pbmcimmune)
table(pbmc$SingleR_pbmcimmune)
View(pbmc$SingleR_pbmcimmune)

pbmc$SingleR_pbmcimmune <- ifelse(pbmc$SingleR_pbmcimmune=='B cells',
                                  'B_cell',
                                  pbmc$SingleR_pbmcimmune)
pbmc$SingleR_pbmcimmune <- ifelse(pbmc$SingleR_pbmcimmune=='NK cells',
                                  'NK_cell',
                                  pbmc$SingleR_pbmcimmune)
pbmc$SingleR_pbmcimmune <- ifelse(pbmc$SingleR_pbmcimmune=='Monocytes',
                                  'Monocyte',
                                  pbmc$SingleR_pbmcimmune)
table(pbmc$SingleR_pbmcimmune)
DimPlot(pbmc, 
        reduction = 'umap', 
        group.by = 'SingleR_pbmcimmune', 
        label = TRUE)+
  NoLegend()
DimPlot(pbmc, 
        reduction = 'umap', 
        group.by = 'SingleR_pbmcimmune', 
        label = F)

FeaturePlot(pbmc, features = c("CXCR2", "CXCL8"))
